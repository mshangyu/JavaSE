
/*异常处理：
1、 runtime异常：程序员--抛出   vs JVM--自动处理
 2、checked异常：程序员--抛出  vs 程序员---手动处理
 
 checked异常处理：
 1、程序员手动处理异常之一：throws
 2、程序员手动异常处理之二：try catch finally 


1、什么时候会发生异常？
2、发生异常之后。判断发生的是什么异常  ---runtime checked
3、异常怎么处理。 根据异常类型，来考虑异常怎么处理？
	a、runtime   JVM
	b、checked：    when？什么时候去使用                                                               how？怎么去使用                                                                                                   ---某个上级解决了----终结
				---？throws====不知道如何解决的情况下         函数签名：throws+checked异常类名  ----抛给调用者---调用者处理？--上级都解决不了--jvm
				---？try catch==知道怎么解决
*/

//自定义checked异常：继承
class FuException extends Exception{
	public FuException(){}
	public FuException(String message){
		super(message);
	}
}

class Demo{
/*
	                   判断异常----------------抛出异常--------------处理异常 
runtime			              代码								jvm
checked   ================程序员处理===================
分离
 */
	
	public void run(int[] arr,int index) throws FuException{
		if(arr==null){
			throw new NullPointerException("JVM：空指针异常");
		}
		if(index>=arr.length){
			throw new ArrayIndexOutOfBoundsException("JVM:index大于了数组的长度");
		}else if(index<0){
			throw new FuException("程序员处理：index负数");
		}
	}
}

public class DiyTest {
	public static void main(String[] args) {
		int[] array=new int[5];
		
		Demo demo=new Demo();
		try {
			demo.run(array, -12);
		} catch (FuException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
